<?php

namespace App\Services\Book;

use Illuminate\Support\Facades\Storage;
use LaravelEasyRepository\Service;
use App\Repositories\Book\BookRepository;
use Nette\Utils\Random;

class BookServiceImplement extends Service implements BookService{

     /**
     * don't change $this->mainRepository variable name
     * because used in extends service class
     */
     protected $mainRepository;

    public function __construct(BookRepository $mainRepository)
    {
      $this->mainRepository = $mainRepository;
    }

    public function create($data)
    {
        $book = [
            'book_title' => str($data['book_title'])->title(),
            'book_category_id' => $data['book_category_id'],
            'book_description' => $data['book_description'],
            'user_id' => $data['user_id'],
            'book_available_stock' => $data['book_available_stock'],
        ];

        $book['book_image_cover'] = request()->file("book_image_cover")->store("book_image_covers");
        $book['book_file'] = request()->file("book_file")->store("book_files");
        $book['book_identifier_number'] = Random::generate(30);

        return parent::create($book); // TODO: Change the autogenerated stub
    }

    public function update($id, array $data)
    {
        $book = $this->find($id);

        if (request()->book_image_cover != null)
        {
            try {
                Storage::delete($book->book_image_cover);
            } catch (\Exception $exception) {
                dd($exception);
            }

            $data['book_image_cover'] = request()->file("book_image_cover")->store("book_image_covers");
        }

        if (request()->book_file != null)
        {
            try {
                Storage::delete($book->book_file);
            } catch (\Exception $exception) {
                dd($exception);
            }

            $data['book_file'] = request()->file("book_file")->store("book_files");
        }

        return parent::update($id, $data); // TODO: Change the autogenerated stub
    }

    public function delete($id)
    {
        $book = $this->find($id);
        if (!auth()->user()->id == $book->user_id || auth()->user()->is_admin != 1) {
            return redirect()->back()->with("failed", "You are not the author.");
        }

        try {
            Storage::delete($book->book_image_cover);
            Storage::delete($book->book_file);
        } catch (\Exception $exception) {
            dd($exception);
        }

        return parent::delete($id); // TODO: Change the autogenerated stub
    }
}
